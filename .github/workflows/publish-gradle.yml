name: Reusable GitHub Packages Publisher

on:
  workflow_call:
    inputs:
      repo-name:
        required: true
        type: string
    secrets:
      USER_GITHUB_TOKEN:
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Calculate expected version
        id: version
        run: |
          tz="Asia/Bangkok"
          year=$(TZ=$tz date +"%Y")
          month=$(TZ=$tz date +"%-m")
          day=$(TZ=$tz date +"%-d")

          # Define m1 based on month
          case "$month" in
            1|2)   m1=0 ;;
            3|4)   m1=1 ;;
            5|6)   m1=2 ;;
            7|8)   m1=3 ;;
            9|10)  m1=4 ;;
            11|12) m1=5 ;;
          esac

          # Custom m2 logic
          if [[ "$month" == 4 || "$month" == 7 || "$month" == 10 ]]; then
            m2=0
          else
            m2=$month
          fi

          echo "Debug: year=$year, month=$month, day=$day, m1=$m1, m2=$m2"

          if [ "$day" -eq 1 ]; then
            version="$year.$m1.$m2"
          else
            version="$year.$m1.$m2-$day"
          fi

          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Check version entries in gradle.properties
        id: check_versions
        run: |
          expected="${{ steps.version.outputs.version }}"
          echo "Expected version: $expected"

          invalid=0

          while IFS= read -r line; do
            key=$(echo "$line" | cut -d'=' -f1)
            val=$(echo "$line" | cut -d'=' -f2)

            if [[ "$key" =~ ^mcengine(-[a-zA-Z0-9]+)?(-(api|common))?\.version$ ]]; then
              if [[ "$val" != "$expected" ]]; then
                echo "::error ::Version mismatch: $key=$val (expected $expected)"
                invalid=$((invalid + 1))
              else
                echo "âœ” $key = $val"
              fi
            fi
          done < gradle.properties

          if [ "$invalid" -gt 0 ]; then
            echo "::error ::Detected $invalid version mismatches."
            exit 1
          fi

      - name: Publish to GitHub Packages
        run: ./gradlew publish
        env:
          USER_GIT_NAME: ${{ github.actor }}
          USER_GITHUB_TOKEN: ${{ secrets.USER_GITHUB_TOKEN }}
          REPO_NAME: ${{ inputs.repo-name }}
